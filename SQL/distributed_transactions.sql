
-- Distributed transaction for changing user's email.
CREATE OR REPLACE PROCEDURE CHANGE_USER_EMAIL
(
    P_OLD_EMAIL IN VARCHAR2,
    P_NEW_EMAIL IN VARCHAR2
) AS
v_user_exists number;
BEGIN
    SELECT COUNT(1) INTO v_user_exists FROM PASSENGER WHERE EMAIL = P_OLD_EMAIL;
    if v_user_exists = 0 then
        RAISE_APPLICATION_ERROR(-20000, '{No user found}');
    else
        UPDATE PASSENGER SET email = P_NEW_EMAIL WHERE email = P_OLD_EMAIL;
        UPDATE PASSENGER@AMERICA_DBLINK SET email = P_NEW_EMAIL WHERE email = P_OLD_EMAIL;
        UPDATE PASSENGER@ASIA_DBLINK SET email = P_NEW_EMAIL WHERE email = P_OLD_EMAIL;
        UPDATE PASSENGER@OCEANIA_DBLINK SET email = P_NEW_EMAIL WHERE email = P_OLD_EMAIL;
        COMMIT;
    end if;
END CHANGE_USER_EMAIL;
/

-- Distributed transaction for deleting a passenger.
CREATE OR REPLACE PROCEDURE DELETE_PASSENGER
(
    P_PASSENGER_ID IN NUMBER
) AS
v_user_exists number;
BEGIN
    SELECT COUNT(1) INTO v_user_exists FROM PASSENGER WHERE ID_PASSENGER = P_PASSENGER_ID;
    if v_user_exists = 0 then
        RAISE_APPLICATION_ERROR(-20000, '{No user found}');
    else
        DELETE FROM TICKET WHERE ID_PASSENGER = P_PASSENGER_ID;
        DELETE FROM PASSENGER WHERE ID_PASSENGER = P_PASSENGER_ID;
        DELETE FROM TICKET@AMERICA_DBLINK WHERE ID_PASSENGER = P_PASSENGER_ID;
        DELETE FROM PASSENGER@AMERICA_DBLINK WHERE ID_PASSENGER = P_PASSENGER_ID;
        DELETE FROM TICKET@ASIA_DBLINK WHERE ID_PASSENGER = P_PASSENGER_ID;
        DELETE FROM PASSENGER@ASIA_DBLINK WHERE ID_PASSENGER = P_PASSENGER_ID;
        DELETE FROM TICKET@OCEANIA_DBLINK WHERE ID_PASSENGER = P_PASSENGER_ID;
        DELETE FROM PASSENGER@OCEANIA_DBLINK WHERE ID_PASSENGER = P_PASSENGER_ID;
        COMMIT;
    end if;
END DELETE_PASSENGER;
/